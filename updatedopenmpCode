#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdbool.h>
#include <omp.h>  // Include OpenMP header

// Define matrix-vector multiplication function with transpose
void matrix_vector_multiply_transpose(double X[][3], double X_T[][5], double w[], double res[], int m, int n) {
    // Calculate the transpose of matrix X (X_T) with collapse
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            X_T[i][j] = X[j][i];
        }
    }

    // Initialize the result vector res to 0
    #pragma omp parallel for
    for (int i = 0; i < m; i++) {
        res[i] = 0;
    }

    // Parallelized matrix-vector multiplication with transpose (X_T) and atomic update
    #pragma omp parallel for
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            #pragma omp atomic
            res[i] += X_T[j][i] * w[j];
        }
    }
}
// Define element-wise vector subtraction function with atomic
void subtract_vectors_parallel(double vec1[], double res2[], int m) {
    #pragma omp parallel for
    for (int i = 0; i < m; i++) {
        #pragma omp atomic
        res2[i] -= vec1[i];
    }
}
// Calculate the norm of a vector in parallel with atomic reduction
double calculate_vector_norm_parallel(double v[], int n) {
    double v_norm = 0.0;
    #pragma omp parallel for reduction(+:v_norm)
    for (int i = 0; i < n; i++) {
        v_norm += v[i] * v[i];
    }
    
    v_norm = sqrt(v_norm);
    return v_norm;
}
// Calculate column-wise sum in parallel with atomic
void column_wise_sum_parallel(double X_T[][5], double col_sum[], int m, int n) {
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        col_sum[i] = 0.0;
        for (int j = 0; j < m; j++) {
            #pragma omp atomic
            col_sum[i] += X_T[i][j];
        }
    }
}

int main() {
	double tstart, tstop, tcalc; // Variables for timing

    tstart = omp_get_wtime(); // Record the start time
    double alpha, epsilon;
    int n = 3; // Number of features (adjust based on your data)
    int m = 5; // Number of data points (adjust based on your data)

    // Load and preprocess your dataset (X and Y)
    printf("Loading and preprocessing dataset...\n");

    // Initialize weights and hyperparameters
    printf("Initializing weights and hyperparameters...\n");

    double w[3];  // Initial weights

    // Define X and Y
    double X[5][3] = {
        {1.0, 2.0, 3.0},
        {4.0, 5.0, 6.0},
        {7.0, 8.0, 9.0},
        {10.0, 11.0, 12.0},
        {13.0, 14.0, 15.0}
    };

    double Y[5] = {0.0, 1.0, 0.0, 1.0, 1.0};

    alpha = 0.05;  // Learning rate
    epsilon = 0.001; // Tolerance
    for (int i = 0; i < n; i++) {
        w[i] = 0.1;  // Initialize weights
    }

    double epsilon_sq = epsilon * epsilon;
    int iteration = 0;
    int max_iterations = 1000;

    // Create arrays for X_T, res, gradient_update
    double X_T[3][5]; // Transpose of X (adjust dimensions)
    double res[5]; // Result vector (adjust dimensions)
    double gradient_update[5]; // Gradient update vector (adjust dimensions)
	while (true) {
        // Calculate the transpose of matrix X (X_T)
        matrix_vector_multiply_transpose(X, X_T, w, res, m, n);

        // Calculate sigmoid function in parallel
        #pragma omp parallel for simd
        for (int i = 0; i < m; i++) {
			
            res[i] = 1.0 / (1.0 + exp(-res[i]));
        }

        // Subtract Y from res in parallel
        #pragma omp parallel for
        for (int i = 0; i < m; i++) {
		#pragma omp atomic
            res[i] -= Y[i];
        }

        // Calculate gradient_update (result of matrix-vector multiplication) in parallel
        matrix_vector_multiply_transpose(X, X_T, res, gradient_update, m, n);

        // Update w in parallel using atomic
        #pragma omp parallel for
        for (int i = 0; i < n; i++) {
            #pragma omp atomic
            w[i] -= alpha * gradient_update[i];
        }

        // Calculate the gradient norm in parallel
        double grad_norm = calculate_vector_norm_parallel(gradient_update, n);

        // Print the updated weight vector w* after each iteration
        printf("Iteration %d - Updated Weight Vector (wâˆ—):\n", iteration);
        for (int i = 0; i < n; i++) {
            printf("%lf ", w[i]);
        }
        printf("\n");

        // Calculate the column-wise sum
        double col_sum[3];
        column_wise_sum_parallel(X_T, col_sum, m, n);

        // Print the column sums
        printf("Column-wise Sum:\n");
        for (int i = 0; i < n; i++) {
            printf("%lf ", col_sum[i]);
        }
        printf("\n");

        // Check for the termination condition based on the gradient norm
        if (grad_norm * grad_norm <= epsilon_sq) {
            // Termination condition met, break out of the loop
            break;
        }

        // Optional: Check for a maximum number of iterations
        if (iteration >= max_iterations) {
            // Maximum iterations reached, exit the loop
            break;
        }

        iteration++;
    }
	
	 tstop = omp_get_wtime();  // Record the stop time

    tcalc = (tstop - tstart) * 1000.0;  // Calculate time in milliseconds

    printf("Time taken: %lf milliseconds\n", tcalc);

    return 0;
}